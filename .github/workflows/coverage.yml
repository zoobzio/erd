name: Coverage

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  coverage:
    name: Test Coverage Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true

    - name: Install dependencies
      run: |
        go mod download
        go install github.com/boumenot/gocover-cobertura@latest

    - name: Run tests with coverage
      run: |
        echo "=== Testing erd library ==="
        go test -v -race -coverprofile=coverage-core.out -covermode=atomic \
          -coverpkg=github.com/zoobzio/erd ./...

        go tool cover -func=coverage-core.out > coverage-summary.txt
        echo "Coverage Summary:"
        tail -1 coverage-summary.txt

        go tool cover -html=coverage-core.out -o coverage-core.html
        gocover-cobertura < coverage-core.out > coverage-core.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage-core.out
        flags: unit
        name: erd-coverage
        fail_ci_if_error: false
        verbose: true

    - name: Generate coverage badge
      run: |
        COVERAGE=$(go tool cover -func=coverage-core.out | tail -1 | grep -oE '[0-9]+\.[0-9]+' | tail -1)
        echo "Coverage: $COVERAGE%"
        echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV

        if awk "BEGIN {exit !($COVERAGE >= 80)}"; then
          COLOR="green"
        elif awk "BEGIN {exit !($COVERAGE >= 60)}"; then
          COLOR="yellow"
        else
          COLOR="red"
        fi
        echo "COVERAGE_COLOR=$COLOR" >> $GITHUB_ENV

    - name: Create coverage comment (PR only)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');

          const summary = fs.readFileSync('coverage-summary.txt', 'utf8');
          const lines = summary.split('\n').filter(line => line.trim());

          const totalLine = lines[lines.length - 1];
          const coverage = totalLine.match(/(\d+\.\d+)%/)?.[1] || 'N/A';

          const coverageData = fs.readFileSync('coverage-core.out', 'utf8');
          const coveredLines = (coverageData.match(/\s+1$/gm) || []).length;
          const uncoveredLines = (coverageData.match(/\s+0$/gm) || []).length;

          const body = `## üìä Coverage Report

          **Total Coverage:** ${coverage}%

          | Metric | Value |
          |--------|-------|
          | Covered Lines | ${coveredLines} |
          | Uncovered Lines | ${uncoveredLines} |
          | Total Lines | ${coveredLines + uncoveredLines} |

          ### Coverage by Package
          \`\`\`
          ${lines.slice(0, -1).join('\n')}
          \`\`\`

          ---
          *Coverage report generated by [Codecov](https://codecov.io)*`;

          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const botComment = comments.find(comment =>
            comment.user.type === 'Bot' && comment.body.includes('üìä Coverage Report')
          );

          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }
      continue-on-error: true

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          coverage-core.*
          coverage-summary.txt
        retention-days: 30

    - name: Coverage summary
      run: |
        echo "### üìä Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Coverage:** ${{ env.COVERAGE }}%" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "#### Coverage by Package" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        head -n -1 coverage-summary.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "#### Standards" >> $GITHUB_STEP_SUMMARY
        echo "- üéØ Target: 70% overall, 80% for new code" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Passing: ‚â• 70%" >> $GITHUB_STEP_SUMMARY
        echo "- ‚ö†Ô∏è Warning: 60-70%" >> $GITHUB_STEP_SUMMARY
        echo "- ‚ùå Failing: < 60%" >> $GITHUB_STEP_SUMMARY
